# ============================================================================
# PRODUCTION DOCKER COMPOSE - GTCX CLOUD DEPLOYMENT
# Production-ready infrastructure for Ghana mining platform
# ============================================================================

version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: gtcx_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-gtcx_production}
      POSTGRES_USER: ${DATABASE_USER:-gtcx}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - gtcx_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-gtcx}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: gtcx_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - gtcx_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Rails API Backend
  gtcx_api:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        RAILS_ENV: production
    container_name: gtcx_api
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER:-gtcx}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-gtcx_production}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      
      # Ghana Government API Configuration
      GHANA_MINERALS_API_URL: ${GHANA_MINERALS_API_URL}
      GHANA_MINERALS_API_KEY: ${GHANA_MINERALS_API_KEY}
      GHANA_CLIENT_ID: ${GHANA_CLIENT_ID}
      
      # MTN Mobile Money Configuration
      MTN_MOMO_API_URL: ${MTN_MOMO_API_URL}
      MTN_SUBSCRIPTION_KEY: ${MTN_SUBSCRIPTION_KEY}
      MTN_USER_ID: ${MTN_USER_ID}
      MTN_API_KEY: ${MTN_API_KEY}
      MTN_ENVIRONMENT: ${MTN_ENVIRONMENT:-production}
      
      # Vodafone Cash Configuration
      VODAFONE_CASH_API_URL: ${VODAFONE_CASH_API_URL}
      VODAFONE_ACCESS_TOKEN: ${VODAFONE_ACCESS_TOKEN}
      VODAFONE_CLIENT_ID: ${VODAFONE_CLIENT_ID}
      VODAFONE_CLIENT_SECRET: ${VODAFONE_CLIENT_SECRET}
      
      # Application Configuration
      BASE_URL: ${BASE_URL}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Monitoring and Logging
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      
    volumes:
      - ./log:/rails/log
      - ./tmp:/rails/tmp
      - ./storage:/rails/storage
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gtcx_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '0.5'
        reservations:
          memory: 512MB
          cpus: '0.25'

  # Vue.js Admin Dashboard
  gtcx_admin:
    build:
      context: ./gtcx-admin-dashboard
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: gtcx_admin
    environment:
      NODE_ENV: production
      VUE_APP_API_URL: ${BASE_URL}/api/v1
      VUE_APP_WEBSOCKET_URL: ${WEBSOCKET_URL}
    ports:
      - "${ADMIN_PORT:-8080}:80"
    networks:
      - gtcx_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.2'

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: gtcx_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./log/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gtcx_api
      - gtcx_admin
    networks:
      - gtcx_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sidekiq Background Job Processing
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: gtcx_sidekiq
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER:-gtcx}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-gtcx_production}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      
      # Same environment variables as gtcx_api
      GHANA_MINERALS_API_URL: ${GHANA_MINERALS_API_URL}
      GHANA_MINERALS_API_KEY: ${GHANA_MINERALS_API_KEY}
      MTN_MOMO_API_URL: ${MTN_MOMO_API_URL}
      MTN_SUBSCRIPTION_KEY: ${MTN_SUBSCRIPTION_KEY}
      VODAFONE_CASH_API_URL: ${VODAFONE_CASH_API_URL}
      VODAFONE_ACCESS_TOKEN: ${VODAFONE_ACCESS_TOKEN}
      
    volumes:
      - ./log:/rails/log
      - ./tmp:/rails/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gtcx_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512MB
          cpus: '0.3'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gtcx_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - gtcx_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: gtcx_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - gtcx_network
    restart: unless-stopped

  # Log Aggregation with Fluentd
  fluentd:
    build:
      context: ./docker/fluentd
    container_name: gtcx_fluentd
    volumes:
      - ./docker/fluentd/conf:/fluentd/etc:ro
      - ./log:/var/log/gtcx
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - gtcx_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gtcx_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16