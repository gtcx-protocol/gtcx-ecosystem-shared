# ============================================================================
# PRODUCTION DOCKERFILE - RAILS API
# Optimized for Ghana mining operations with security & performance
# ============================================================================

FROM ruby:3.2.2-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    postgresql-dev \
    nodejs \
    npm \
    git \
    tzdata \
    gcompat

# Set working directory
WORKDIR /rails

# Copy Gemfile first for better caching
COPY Gemfile Gemfile.lock ./

# Install gems
RUN bundle config --global frozen 1 && \
    bundle config set --local without 'development test' && \
    bundle install --jobs 4 --retry 3

# Copy application code
COPY . .

# Precompile assets if they exist
RUN if [ -f "config/application.rb" ]; then \
      RAILS_ENV=production SECRET_KEY_BASE=dummy bundle exec rails assets:precompile; \
    fi

# ============================================================================
# PRODUCTION STAGE
# ============================================================================

FROM ruby:3.2.2-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    tzdata \
    curl \
    ca-certificates \
    gcompat \
    && rm -rf /var/cache/apk/*

# Create gtcx user for security
RUN addgroup -g 1000 gtcx && \
    adduser -D -s /bin/sh -u 1000 -G gtcx gtcx

# Set working directory
WORKDIR /rails

# Copy gems from builder
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Copy application with correct ownership
COPY --from=builder --chown=gtcx:gtcx /rails /rails

# Create necessary directories
RUN mkdir -p log tmp/pids tmp/cache tmp/sockets storage && \
    chown -R gtcx:gtcx log tmp storage

# Install additional gems for production
RUN gem install pg --no-document

# Switch to gtcx user
USER gtcx

# Environment variables
ENV RAILS_ENV=production \
    RACK_ENV=production \
    RAILS_SERVE_STATIC_FILES=true \
    RAILS_LOG_TO_STDOUT=true \
    SECRET_KEY_BASE_DUMMY=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Create entrypoint script
COPY --chown=gtcx:gtcx docker/entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

# Use entrypoint
ENTRYPOINT ["./entrypoint.sh"]

# Default command
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]